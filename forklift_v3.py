from pprint import pprint
from collections import defaultdict
from functools import reduce

from termcolor import cprint

new_list = ['1908201',
            '1612708',
            '821502',
            '269415',
            '1325903',
            '175723',
            '1432802',
            '1501303',
            '1231202',
            '1658104',
            '912405',
            '886108',
            '736002',
            '2015001',
            '1481204',
            '1231401',
            '1860002',
            '1433002',
            '196602',
            '1481103',
            '1230902',
            '263202',
            '862211',
            '1676617',
            '2075201',
            '1811102',
            '905213',
            '17253',
            '1908401',
            '2165502',
            '844201',
            '47606',
            '1384401',
            '269613',
            '2061703',
            '246704',
            '776202',
            '1658304',
            '315504',
            '739941',
            '196201',
            '1910401',
            '175832',
            '1224902',
            '202663',
            '1868301',
            '1851202',
            '315802',
            '1851002',
            '772404',
            '1878201',
            '170402',
            '1913903',
            '1743604',
            '1612609',
            '1135304',
            '752005',
            '819310',
            '2074801',
            '1071602',
            '821408',
            '1574501',
            '1378506',
            '1868401',
            '2071201',
            '2041603',
            '246303',
            '776102',
            '1910501',
            '1342004',
            '1467302',
            '437008',
            '1231502',
            '752903',
            '2086501',
            '478307',
            '316101',
            '372206',
            '1609801',
            '1433202',
            '179602',
            '1342305',
            '325207',
            '119206',
            '1850902',
            '1487803',
            '1859802',
            '2074701',
            '2074901',
            '1868702',
            '738202',
            '85813',
            '47701',
            '822603',
            '1467203',
            '321705',
            '819410',
            '712702',
            '1906801',
            '371503',
            '85927',
            '735203',
            '377402',
            '2073103',
            '865503',
            '14692',
            '1868601',
            '5608',
            '1933803',
            '1273002',
            '1508203',
            '1676417',
            '1909201',
            '1896402',
            '436907',
            '1878101',
            '1750105',
            '1909901',
            '1324808',
            '825605',
            '1467102',
            '750003',
            '754403',
            '36309',
            '175916',
            '1849502',
            '1977702',
            '1896503',
            '1384301',
            '979807',
            '76820',
            '819611',
            '195715',
            '2073203',
            '752602',
            '1857603',
            '1868501',
            '485504',
            '379502',
            '1533902',
            '780015',
            '36012',
            '1487905',
            '1487603',
            '1487503',
            '2086401',
            '305804',
            '1379202',
            '170202',
            '1433102',
            '840707',
            '1675212',
            '2106001',
            '2070401',
            '912304',
            '24402',
            '1231101',
            '269514',
            '1915603',
            '1378402',
            '1346403',
            '1746102',
            '1231301',
            '932202',
            '1887602',
            '428921',
            '1324608',
            '1500301',
            '1959913',
            '1849302',
            '1906701',
            '712802',
            '1880502',
            '1441502',
            '1908301',
            '60108',
            '372112',
            '377602',
            '1019704',
            '1806201',
            '1655302',
            '1852202',
            ]
bin_list = ['1.1.1',
            '1.1.2',
            '1.1.3',
            '1.1.4',
            '1.1.5',
            '1.1.6',
            '1.1.7',
            '1.1.8',
            '1.2',
            '1.3',
            '1.4',
            '1.5',
            '10.1',
            '10.10',
            '10.2',
            '10.3',
            '10.4',
            '10.5',
            '10.6',
            '10.7',
            '10.8',
            '10.9',
            '11.1',
            '11.10',
            '11.2',
            '11.3',
            '11.4',
            '11.5',
            '11.6',
            '11.7',
            '11.8',
            '11.9',
            '12.1.1',
            '12.1.2',
            '12.1.3',
            '12.1.4',
            '12.1.5',
            '12.1.6',
            '12.1.7',
            '12.1.8',
            '12.10',
            '12.11',
            '12.12',
            '12.13',
            '12.14',
            '12.15',
            '12.16',
            '12.17',
            '12.18',
            '12.19',
            '12.20',
            '12.5',
            '12.6',
            '12.7',
            '12.8',
            '12.9',
            '13.10',
            '13.11',
            '13.12',
            '13.13',
            '13.14',
            '13.15',
            '13.16',
            '13.17',
            '13.18',
            '13.19',
            '13.20',
            '13.9',
            '13.4',
            '13.6',
            '13.7',
            '13.8',
            '2.0',
            '2.1',
            '2.2',
            '2.3',
            '2.4',
            '2.5',
            '2.6',
            '3.1A',
            '3.1B',
            '3.2A',
            '3.2B',
            '3.3A',
            '3.3B',
            '3.4A',
            '3.4B',
            '3.5A',
            '3.5B',
            '3.6A',
            '3.6B',
            '3.7A',
            '3.7B',
            '3.8A',
            '3.8B',
            '3.9A',
            '3.9B',
            '4.1',
            '4.10A',
            '4.10B',
            '4.2',
            '4.3',
            '4.4',
            '4.5',
            '4.6',
            '4.7',
            '4.8',
            '4.9',
            '5.1',
            '5.10A',
            '5.10B',
            '5.2',
            '5.3',
            '5.4',
            '5.5',
            '5.6',
            '5.7',
            '5.8A',
            '5.8B',
            '5.9',
            '6.1',
            '6.10A',
            '6.10B',
            '6.2',
            '6.3',
            '6.4',
            '6.5',
            '6.6',
            '6.7',
            '6.8',
            '6.9',
            '7.1',
            '7.10A',
            '7.10B',
            '7.2',
            '7.3',
            '7.4',
            '7.5',
            '7.6',
            '7.7',
            '7.8',
            '7.9',
            '8.1',
            '8.10A',
            '8.10B',
            '8.2',
            '8.3',
            '8.4',
            '8.5',
            '8.6',
            '8.7A',
            '8.7B',
            '8.8',
            '8.9',
            '9.1',
            '9.10',
            '9.2',
            '9.3',
            '9.4',
            '9.5',
            '9.6',
            '9.7',
            '9.8',
            '9.9',
            'A1-2',
            'A11-12',
            'A13-14',
            'A15-16',
            'A18-19',
            'A20-21',
            'A22-23',
            'A24-25',
            'A26-27',
            'A28-30',
            'A3-4',
            'A32',
            'A33',
            'A34',
            'A35',
            'A36',
            'A37',
            'A38',
            'A39-40',
            'A41-42',
            'A43-44',
            'A45-46',
            'A48-50',
            'A5-6',
            'A51-52',
            'A53-54',
            'A55-56',
            'A7-8',
            'A9-10',
            'B10-11',
            'B12-13',
            'B14-15',
            'B16-17',
            'B18-19',
            'B20-21',
            'B22-23',
            'B24-25',
            'B5-7',
            'B8-9',
            'C18-19',
            'C20-21',
            'C22-23',
            'C24-25',
            'C29-31',
            'C32-33',
            'C34-35',
            'C36-37',
            'C38-39',
            'C40-41',
            'C42-43',
            'C44-45',
            'C47-48',
            'C49-50',
            'C51-52',
            'C53-54',
            'C55-56',
            'C57-58',
            'D31-32',
            'D33-34',
            'D35-36',
            'D37-38',
            'D39-40',
            'D41-42',
            'D43-44',
            'D45-46',
            'D47-48',
            'D49-50',
            'D51-52',
            'D53-54',
            'D55-56',
            'D57-58',
            'E29-30',
            'E31-32',
            'E33-34',
            'E35-36',
            'E37-38',
            'E39-40',
            'E41-42',
            'E43-45',
            'E47-48',
            'E49-50',
            'E51-52',
            'E53-54',
            'F14-15',
            'F16-17',
            'F18-19',
            'F20-21',
            'F22-23',
            'F24-25',
            'F29-30',
            'F31-32',
            'F33-34',
            'F35-36',
            'F37-38',
            'F39-40',
            'F41-42',
            'F43-44',
            'F45-46',
            'F47-48',
            'F49-50',
            'F51-52',
            'F53-54',
            'F55-56',
            'F57-58',
            'G10',
            'G11',
            'G12',
            'G13',
            'G14',
            'G15',
            'G16',
            'G17',
            'G19',
            'G20',
            'G21',
            'G22',
            'G23',
            'G24.1',
            'G24.2',
            'G24.3',
            'G24.4',
            'G24.5',
            'G24.6',
            'G24.7',
            'G24.8',
            'HL1',
            'HL2',
            'HL3',
            'IMPORT-0',
            'IMPORT-1',
            'IMPORT-10',
            'IMPORT-11',
            'IMPORT-12',
            'IMPORT-13',
            'IMPORT-14',
            'IMPORT-15',
            'IMPORT-16',
            'IMPORT-17',
            'IMPORT-18',
            'IMPORT-19',
            'IMPORT-2',
            'IMPORT-20',
            'IMPORT-21',
            'IMPORT-22',
            'IMPORT-23',
            'IMPORT-24',
            'IMPORT-25',
            'IMPORT-26',
            'IMPORT-27',
            'IMPORT-28',
            'IMPORT-29',
            'IMPORT-3',
            'IMPORT-30',
            'IMPORT-31',
            'IMPORT-32',
            'IMPORT-33',
            'IMPORT-34',
            'IMPORT-35',
            'IMPORT-36',
            'IMPORT-37',
            'IMPORT-38',
            'IMPORT-39',
            'IMPORT-4',
            'IMPORT-40',
            'IMPORT-5',
            'IMPORT-6',
            'IMPORT-7',
            'IMPORT-8',
            'IMPORT-9',
            'L1.1',
            'L1.2',
            'L1.3',
            'L1.4',
            'L1.5',
            'L1.6',
            'L1.7',
            'L1.8',
            'L10',
            'L11',
            'L12',
            'L13',
            'L14',
            'L15',
            'L16',
            'L17',
            'L19',
            'L20',
            'L21',
            'L22',
            'L23',
            'L24',
            'L25',
            'L25-26',
            'L26',
            'L27',
            'L28',
            'L29-30',
            'L5',
            'L6',
            'L7',
            'L8',
            'L9',
            'M1',
            'M10',
            'M11',
            'M12',
            'M13',
            'M14',
            'M15',
            'M16',
            'M17',
            'M18',
            'M19',
            'M2',
            'M20',
            'M21',
            'M22',
            'M23',
            'M24',
            'M25',
            'M26-1',
            'M26-10',
            'M26-11',
            'M26-12',
            'M26-13',
            'M26-14',
            'M26-15',
            'M26-16',
            'M26-17',
            'M26-18',
            'M26-19',
            'M26-2',
            'M26-20',
            'M26-21',
            'M26-22',
            'M26-23',
            'M26-24',
            'M26-25',
            'M26-26',
            'M26-27',
            'M26-28',
            'M26-29',
            'M26-3',
            'M26-30',
            'M26-31',
            'M26-32',
            'M26-33',
            'M26-34',
            'M26-35',
            'M26-36',
            'M26-4',
            'M26-5',
            'M26-6',
            'M26-7',
            'M26-8',
            'M26-9',
            'M3',
            'M4',
            'M5',
            'M6',
            'M7',
            'M8',
            'M9',
            'MK14.1',
            'MK14.2',
            'MK14.3',
            'MK15.1',
            'MK15.2',
            'MK15.3',
            'MK16.0',
            'MK16.1',
            'MK16.2',
            'MK16.3',
            'MK17.1',
            'MK17.2',
            'MK17.3',
            'MK18.1',
            'MK18.2',
            'MK18.3',
            'MK19.1',
            'MK19.2',
            'MK19.3',
            'MK19.4',
            'MK19.5',
            'MK19.6',
            'MK20.1',
            'MK20.2',
            'MK20.3',
            'MK20.4',
            'MK20.5',
            'MK20.6',
            'MK21.1',
            'MK21.2',
            'MK21.3',
            'MK21.4',
            'MK21.5',
            'MK21.6',
            'OFFICE',
            'PR1',
            'PR2',
            'PR3',
            'R1-1',
            'R1-3',
            'R10-1',
            'R10-3',
            'R11-1',
            'R11-3',
            'R12-1',
            'R12-3',
            'R12-6',
            'R12-9',
            'R13-1',
            'R13-3',
            'R14-1',
            'R14-3',
            'R15-1',
            'R15-3',
            'R16-1',
            'R16-3',
            'R17-1',
            'R17-3',
            'R18-1',
            'R18-3',
            'R18-5',
            'R18-6',
            'R18-8',
            'R18-9',
            'R19-1',
            'R19-3',
            'R2-1',
            'R2-3',
            'R3-1',
            'R3-3',
            'R4-1',
            'R4-3',
            'R5-1',
            'R5-3',
            'R7-1',
            'R7-2',
            'R8-1',
            'R8-2',
            'R8-3',
            'R8-4',
            'R8-5',
            'R8-6',
            'R9-1',
            'R9-3',
            'R9-4',
            'R9-7',
            'S1',
            'S10',
            'S11',
            'S12',
            'S13',
            'S14',
            'S15',
            'S16',
            'S17',
            'S18',
            'S19',
            'S2',
            'S20',
            'S21',
            'S22',
            'S23',
            'S24',
            'S25',
            'S26',
            'S27',
            'S28',
            'S29',
            'S3',
            'S30',
            'S31',
            'S32',
            'S33',
            'S34',
            'S35',
            'S36',
            'S37',
            'S38',
            'S39',
            'S4',
            'S40',
            'S41',
            'S42',
            'S43',
            'S44',
            'S45',
            'S46',
            'S47',
            'S48',
            'S49',
            'S5',
            'S50',
            'S51',
            'S6',
            'S7',
            'S8',
            'S9',
            'TEMP',
            'TEMP-2',
            'VLANPAK-0',
            'VLANPAK-1',
            'VLANPAK-2',
            'VLANPAK-3',
            'VLANPAK-4',
            'VLANPAK-5',
            'VLANPAK-6',
            'VLANPAK-7',
            'VLANPAK-8',
            'VLANPAK-9',
            ]

material_name_dict = {
    '36309': '20.0 Х1 СИРОП КУПАЖ ФАНТА АПЕЛЬС БИБ РБ',
    '36012': '20.0 Х1 СИРОП КУПАЖ КОКА-КОЛА БИБ РБ',
    '321206': '20.0 Х1 СИРОП КУПАЖ СПРАЙТ БИБ РБ',
    '912405': '1.0 Х12 ШВЕППС ПРЯНАЯ КЛЮКВА ПЭТ РБ',
    '1342305': '1.5 Х9 БОНАКВА НЕГАЗ НОВАЯ ПЭТ РБ',
    '195715': '500 Х24 КОКА-КОЛА ПЭТ РБ',
    '712702': '500 Х24 БОНАКВА ПЛЮС СРЕДНЕГАЗИР ПЭТ РБ',
    '85813': '500 Х24 СПРАЙТ ПЭТ РБ',
    '1977702': '500 Х24 ФАНТА МАНГО ГУАВА ПЭТ РБ',
    '85927': '500 Х24 ФАНТА АПЕЛЬСИН ОБОГАЩЕНН ПЭТ РБ',
    '76820': '500 Х24 БОНАКВА СИЛЬНОГАЗИР НОВАЯ ПЭТ РБ',
    '1346403': '900 Х12 ДОБРЫЙ ПАЛПИ АПЕЛЬСИН ПЭТ РФ',
    '905213': '330 Х12 КОКА-КОЛА БЕЗ САХАРА МЕТ/Б РФ',
    '428921': '250 Х12 КОКА-КОЛА СТЕКЛ УКР',
    '1658304': '200 Х12 РИЧ ЯБЛОЧНЫЙ СОК СТЕКЛ РФ',
    '844201': '2.0 Х6 ДОБРЫЙ АБРИКОС НЕКТАР КОМБ/М РФ',
    '1467102': '450 Х12 ДОБРЫЙ ПАЛПИ ТРОПИК ПЭТ РФ',
    '437008': '250 Х12 СПРАЙТ НОВ Ф СТЕКЛ УКР',
    '1384401': '0.33 Х12 СТН БОНАКВА НЕГАЗИРОВАННАЯ РФ',
    '1743604': '1.0 Х12 ФЬЮЗ ТИ ЧАЙ ЗЕЛ КЛУБН-МАЛ ПЭТ РФ',
    '1676617': '500 Х12 ФЬЮЗ ТИ ЧАЙ ЗЕЛ МАНГО-РОМ ПЭТ РФ',
    '1896402': '1.0 Х12 ФЬЮЗ ТИ ЧАЙ ЛЕС ЯГ ГИБИСК ПЭТ РФ',
    '1467203': '450 Х12 ДОБРЫЙ ПАЛПИ АНАНАС ПЭТ РФ',
    '1750105': '500 Х12 ФЬЮЗ ТИ ЧАЙ ЗЕЛ КЛУБН-МАЛ ПЭТ РФ',
    '1896503': '500 Х12 ФЬЮЗ ТИ ЛЕС ЯГОДЫ ГИБИСК ПЭТ РФ',
    '1325903': '450 Х12 ДОБРЫЙ ПАЛПИ АПЕЛЬСИН ПЭТ РФ',
    '1467302': '900 Х12 ДОБРЫЙ ПАЛПИ ТРОПИК ПЭТ РФ',
    '2073103': '0.5X12 ПЭТ ФЬЮЗ ЧАЙ УЛУН МАЛ МЯТ ЗЕРО РФ',
    '1384301': '0.33 Х12 СТН БОНАКВА ГАЗИРОВАННАЯ РФ',
    '1676417': '500 Х12 ФЬЮЗ ТИ ЧАЙ ЛИМОН-ЛЕМОНГР ПЭТ РФ',
    '2074901': '500 Х24 КОКА-КОЛА БЕЗ САХАРА ПЭТ РБ',
    '1433202': '1.5 Х9 БОНАКВА ЛИМОН НАП ПЭТ РБ',
    '776202': '2.0 Х6 БОНАКВА ЛИМОН НАП ПЭТ РБ',
    '1135304': '500 X24 КОКА-КОЛА ВАНИЛЛА ПЭТ РБ',
    '2074701': '1.5 Х9 ФАНТА МАНГО ГУАВА ПЭТ РБ',
    '24402': '1.0 Х12 БОНАКВА МАЛИНА НАП ПЭТ РБ',
    '10060655': 'СТАКАНЫ KFC 400 (1Х50) РФ',
    '10060654': 'СТАКАНЫ KFC 500 (1Х50) РФ',
    '10018454': 'КРЫШКИ 400-500(1x150)РФ',
    '10077352': 'КРЫШКИ 800 (1X90)',
    '10018456': 'СТАКАНЫ 500 (1Х50) РФ',
    '10018455': 'СТАКАНЫ 400 (1Х50) РФ',
    '10060656': 'СТАКАНЫ KFC 800 (1Х50) РФ',
    '10048062': 'СТАКАНЫ 800 (1Х50) РФ',
    '10064537': 'СТАКАНЫ 300 (1Х100) ДПЕ12 РФ',
    '263202': '2.0 Х6 БОНАКВА МАЛИНА НАП ПЭТ РБ',
    '47606': '500 Х24 ШВЕППС БИТТЕР ЛЕМОН ПЭТ РБ',
    '1019704': '1.0 Х12 ФАНТА ЦИТРУС ПЭТ РБ',
    '1433102': '1.5 Х9 БОНАКВА МАЛИНА НАП ПЭТ РБ',
    '246303': '2.0 Х6 ФАНТА ЦИТРУС ПЭТ РБ',
    '1868301': '1.5 Х9 ФРУКТАЙМ ЗОЛОТОЙ КЛЮЧИК ПЭТ РБ',
    '1273002': '1.0 X12 КОКА-КОЛА ВАНИЛЛА ПЭТ РБ',
    '316101': '1.0 Х12 ФРУКТАЙМ ЛИМОНАД ПЭТ РБ',
    '1231202': '1.0 Х12 БОНАКВА ЯБЛОКО НАП ПЭТ РБ',
    '246704': '500 Х24 ФАНТА ЦИТРУС МИКС ПЭТ РБ',
    '2041603': '1.0 Х12 ФАНТА МАНГО ГУАВА ПЭТ РБ',
    '1868501': '1.5 Х9 ФРУКТАЙМ ДЮШЕС ПЭТ РБ',
    '886108': '2.0 Х6 БОНАКВА НЕГАЗИРОВАНН НОВАЯ ПЭТ РБ',
    '2075201': '2.0 Х6 КОКА-КОЛА БЕЗ САХАРА ПЭТ РБ',
    '170202': '500 Х24 ШВЕППС ИHДИАН ТОНИК ПЭТ РБ',
    '1910501': '1.0 Х12 СПРАЙТ МЯТА ПЭТ РБ',
    '1868702': '1.5 X9 КОКА-КОЛА ВАНИЛЛА ПЭТ РБ',
    '1324608': '1.5 Х9 СПРАЙТ ПЭТ РБ',
    '170402': '1.0 Х12 ШВЕППС ИHДИАН ТОНИК ПЭТ РБ',
    '1231301': '1.0 Х12 ФРУКТАЙМ СНЕЖНЫЙ ПЭТ РБ',
    '196201': '500 Х24 ФРУКТАЙМ ЗОЛОТОЙ КЛЮЧИК ПЭТ РБ',
    '1806201': '1.5 Х9 ФАНТА МАНДАРИН ПЭТ РБ',
    '1342004': '1.5 Х9 ШВЕППС БИТТЕР ЛЕМОН ПЭТ РБ',
    '2015001': '1.5 ПЕТ X9 ЛИННУСЭ КАЛИ',
    '1324808': '1.5 Х9 ФАНТА АПЕЛЬСИН ПЭТ РБ',
    '179602': '500 Х24 БОНАКВА ЛИМОН НАП ПЭТ РБ',
    '912304': '500 Х24 ШВЕППС ПРЯНАЯ КЛЮКВА ПЭТ РБ',
    '119206': '1.5 Х9 БОНАКВА СИЛЬНОГАЗИР НОВАЯ ПЭТ РБ',
    '315504': '1.5 Х9 ФАНТА ЦИТРУС ПЭТ РБ',
    '1878101': '1.5 Х9 КОКА-КОЛА БЕЗ САХАРА ПЭТ',
    '739941': '500 Х24 БОНАКВА НЕГАЗИРОВАНН НОВ ПЭТ РБ',
    '1071602': '500 Х24 ФАНТА МАНДАРИН ПЭТ РБ',
    '47701': '1.0 Х12 ФРУКТАЙМ ЗОЛОТОЙ КЛЮЧИК ПЭТ РБ',
    '269415': '1.0 Х12 КОКА-КОЛА ПЭТ РБ',
    '175832': '2.0 Х6 ФАНТА АПЕЛЬСИН ОБОГАЩЕНН ПЭТ РБ',
    '1500301': '1.0 Х12 ФАНТА МАНДАРИН ПЭТ РБ',
    '372112': '1.0 Х12 ДОБРЫЙ АПЕЛЬСИН НЕК ДЖ КОМБ/М РБ',
    '819310': '1.0 Х12 ДОБРЫЙ ЯБЛОЧНЫЙ СОК ДЖ КОМБ/М РБ',
    '819611': '1.0 Х12 ДОБРЫЙ МУЛЬТИФ НЕК ДЖ КОМБ/М РБ',
    '712802': '1.0 Х12 БОНАКВА ПЛЮС СРЕДНЕГ НОВ ПЭТ РБ',
    '478307': '1.0 Х12 БОНАКВА СИЛЬНОГАЗ НОВАЯ ПЭТ РБ',
    '325207': '1.0 Х12 БОНАКВА НЕГАЗИРОВАН НОВ ПЭТ РБ',
    '1878201': '1.0 Х12 КОКА-КОЛА БЕЗ САХАРА ПЭТ РБ',
    '776102': '1.0 Х12 БОНАКВА ЛИМОН НАП ПЭТ РБ',
    '175916': '2.0 Х6 СПРАЙТ ПЭТ РБ',
    '269613': '1.0 Х12 ФАНТА АПЕЛЬСИН ОБОГАЩЕНН ПЭТ РБ',
    '269514': '1.0 Х12 СПРАЙТ ПЭТ РБ',
    '175723': '2.0 Х6 КОКА-КОЛА ПЭТ РБ',
    '315802': '1.0 Х12 ШВЕППС БИТТЕР ЛЕМОН ПЭТ РБ',
    '738202': '2.0 Х6 БОНАКВА ПЛЮС СРЕДНЕГАЗ НОВ ПЭТ РБ',
    '60108': '2.0 Х6 БОНАКВА СИЛЬНОГАЗИР НОВАЯ ПЭТ РБ',
    '5608': '1.5 X9 КОКА-КОЛА ПЭТ РБ',
    '2071201': '1.5 Х9 БОНАКВА ПЛЮС СРЕДНЕГАЗ НОВ ПЭТ РБ',
    '1487803': '330 Х24 ДОБРЫЙ ЯБЛОЧНЫЙ СОК КОМБ/М РФ',
    '1574501': '1.0 Х12 ДЖОЙ ТОМАТНЫЙ СОК КОМБ/М РБ',
    '819410': '1.0 Х12 ДОБРЫЙ ТОМАТНЫЙ СОК ДЖ КОМБ/М РБ',
    '1487603': '330 Х24 ДОБРЫЙ МУЛЬТ НЕКТАР КОМБ/М РФ',
    '2165502': '330 Х12 КОКА-КОЛА ВАНИЛЛА МЕТ/Б РФ',
    '1487503': '330 Х24 ДОБРЫЙ АПЕЛЬСИН НЕКТАР КОМБ/М РФ',
    '825605': '1.0 Х12 ДОБРЫЙ ЯБЛ МАЛИ НЕК ДЖ КОМБ/М РБ',
    '372206': '1.0 Х12 ДОБРЫЙ ПЕРС-ЯБЛ НЕК ДЖ КОМБ/М РБ',
    '819810': '1.0 Х12 ДОБРЫЙ АБРИКОС НЕК ДЖ КОМБ/М РБ',
    '1508203': '1.0 Х12 ДОБР ВИН КЛ БРУС МОРОШ МОРC ДЖЕМ',
    '1915603': '1.0 Х12 ДОБРЫЙ ЯБЛ ЦИТР СОК ДЖ КОМБ/М РБ',
    '821408': '1.0 Х12 ДОБРЫЙ АНАНАС НЕК ДЖ КОМБ/М РБ',
    '1913903': '1.0 Х12 ДОБРЫЙ ЯБЛ ВИН СОК ДЖ КОМБ/М РБ',
    '1746102': '1.5 Х6 ФЬЮЗ ТИ ЧАЙ ЗЕЛ КЛУБН-МАЛ ПЭТ РФ',
    '1880502': '300 Х12 РИЧ АПЕЛЬСИН МАНГО НЕКТАР ПЭТ РФ',
    '1852202': '300 Х12 РИЧ АПЕЛЬСИН СОК ПЭТ РФ',
    '1487905': '330 Х24 ДОБРЫЙ ТОМАТ СОК СОЛЬ КОМБ/М РФ',
    '1255102': '1.0 Х12 РИО МУЛЬТИФРУКТ СОК ДЖ КОМБ/М РБ',
    '1255302': '1.0 Х12 РИО ЯБЛОЧНЫЙ СОК ДЖ КОМБ/М РБ',
    '1231401': '1.0 Х12 ФРУКТАЙМ ДЮШЕС ПЭТ РБ',
    '1378402': '1.0 Х12 ШВЕППС МОХИТО ПЭТ РБ',
    '1910401': '500 Х24 СПРАЙТ МЯТА ПЭТ РБ',
    '1868401': '1.5 Х9 ФРУКТАЙМ СНЕЖНЫЙ ПЭТ РБ',
    '1433002': '1.5 Х9 БОНАКВА ЯБЛОКО НАП ПЭТ РБ',
    '2086401': '1.0 Х12 ШВЕППС ГРЕЙПФРУТ ПЭТ',
    '1849302': '1.93 Х6 МОЯ СЕМЬЯ МУЛЬТ НАП КОМБ/М РФ',
    '932202': '2.0 Х6 ДОБРЫЙ ЯБЛ РЯБ МАЛ НЕК КОМБ/М РФ',
    '1501303': '1.0 Х12 РИЧ АПЕЛЬСИН МАНГО НЕК КОМБ/М РФ',
    '371503': '2.0 Х6 ДОБРЫЙ АПЕЛЬСИН НЕКТАР КОМБ/М РФ',
    '754403': '1.0 Х12 РИЧ ГРЕЙПФРУТОВЫЙ СОК КОМБ/М РФ',
    '736002': '1.0 Х12 РИЧ АНАНАСОВЫЙ СОК КОМБ/М РФ',
    '752903': '1.0 Х12 РИЧ ТОМАТНЫЙ СОК КОМБ/М РФ',
    '735203': '1.0 Х12 РИЧ АПЕЛЬСИНОВЫЙ СОК КОМБ/М РФ',
    '752005': '1.0 Х12 РИЧ ВИШНЕВЫЙ НЕКТАР КОМБ/М РФ',
    '1224902': '1.0 Х12 РИЧ КЛЮКВ-ВИНОГР МОРС КОМБ/М УКР',
    '979807': '1.0 X12 РИЧ МУЛЬТИФР ВИТ А СОК КОМБ/M РФ',
    '750003': '1.0 Х12 РИЧ ЯБЛОЧНЫЙ СОК КОМБ/М РФ',
    '2073203': '1.0X12 ПЭТ ФЬЮЗ ЧАЙ УЛУН МАЛ МЯТ ЗЕРО РФ',
    '780015': '330 Х12 ШВЕППС БИТТЕР ЛЕМОН МЕТ/Б РФ',
    '752602': '1.0 Х12 РИЧ ПЕРСИКОВЫЙ НЕКТАР КОМБ/М РФ',
    '1231502': '2.0 Х6 БОНАКВА ЯБЛОКО НАП ПЭТ РБ',
    '1441502': '500 X24 ШВЕППС ГРЕЙПФРУТ ПЭТ РБ',
    '1230902': '500 Х24 БОНАКВА ЯБЛОКО НАП ПЭТ РБ',
    '196602': '500 Х24 БОНАКВА МАЛИНА НАП ПЭТ РБ',
    '1231101': '500 Х24 ФРУКТАЙМ ДЮШЕС ПЭТ РБ',
    '1379202': '500 Х24 ШВЕППС МОХИТО ПЭТ РБ',
    '1432802': '1.5 Х9 ШВЕППС ПРЯНАЯ КЛЮКВА ПЭТ РБ',
    '1887602': '1.0 Х12 ФЬЮЗ ТИ ЧАЙ ЛИМ-ЛЕМОНГР ПЭТ РФ',
    '436907': '250 Х12 ФАНТА АПЕЛЬСИН СТЕКЛ УКР',
    '2106001': '250 Х12 СТН КОКА-КОЛА БЕЗ САХАРА УКР',
    '1658104': '200 Х12 РИЧ АПЕЛЬСИН СОК СТЕКЛ РФ',
    '305804': '250 Х12 ШВЕППС ИНДИАН ТОНИК СТЕКЛ РФ',
    '1704604': '200 Х12 РИЧ ВИШНЕВЫЙ НЕКТАР СТЕКЛ РФ',
    '1857603': '330 Х12 ФЬЮЗ ТИ ЧАЙ ЛИМОН-ЛЕМОН МЕТ/Б РФ',
    '1811102': '1.0 Х12 ФЬЮЗ ТИ ЧАЙ ЗЕЛ МАНГО-РОМ ПЭТ РФ',
    '1655302': '200 Х12 РИЧ ТОМАТ С СОЛЬЮ СОК СТЕКЛ РФ',
    '1851002': '300 Х12 РИЧ ВИШНЯ НЕКТАР ПЭТ РФ',
    '1675212': '1.5 Х6 ФЬЮЗ ТИ ЧАЙ ЛИМОН-ЛЕМОНГР ПЭТ РФ',
    '1851202': '300 Х12 РИЧ ЯБЛОЧНЫЙ СОК ПЭТ РФ',
    '377402': '200 Х18 ДОБРЫЙ МУЛЬТИФРУКТ НЕК КОМБ/М РБ',
    '1609801': '200 Х18 ДОБРЫЙ ЯБЛ РЯБ МАЛ НЕК КОМБ/М РБ',
    '377602': '200 Х18 ДОБРЫЙ АНАНАС НЕКТАР КОМБ/М РБ',
    '2074801': '200 Х18 ДОБРЫЙ ЯБЛОКО-ВИНОГРАД СОК',
    '772404': '200 Х18 ДОБРЫЙ АПЕЛЬСИНОВЫЙ НЕК Б МЯКОТИ',
    '1821601': '200 Х18 ДОБРЫЙ ВИНОГ КЛЮК МОРС КОМБ/М РБ',
    '379502': '200 Х18 ДОБРЫЙ ЯБЛОЧНЫЙ СОК КОМБ/М РБ',
    '822603': '2.0 Х6 ДОБРЫЙ ЯБЛОЧНЫЙ СОК КОМБ/М РФ',
    '1860002': '500 Х12 БОНАКВА ВИВА ЯБЛОКО ПЭТ РФ',
    '1849502': '1.93 Х6 МОЯ СЕМЬЯ ЯГ-ФРУК НАП КОМБ/М РФ',
    '821502': '2.0 Х6 ДОБРЫЙ АНАНАС НЕКТАР КОМБ/М РФ',
    '1868601': '1.5 Х9 ФРУКТАЙМ ЛИМОНАД ПЭТ РБ',
    '862211': '500 Х12 ПАУЭРЭЙД ЛЕДЯНАЯ БУРЯ ПЭТ РФ',
    '865503': '2.0 Х6 ДОБРЫЙ МУЛЬТИФР НЕКТАР КОМБ/М РФ',
    '1859802': '500 Х12 БОНАКВА ВИВА ЛИМОН ПЭТ РФ',
    '1850902': '1.93 Х6 МОЯ СЕМЬЯ ЯБ Р ВИШ НАП КОМБ/М РФ',
    '840707': '2.0 Х6 ДОБРЫЙ ТОМАТ СОК С СОЛЬ КОМБ/М РФ',
    '14692': '330 X24 КОКА-КОЛА MET/Б РФ',
    '1909201': '1.5 Х9 ФРУКТАЙМ КРЕМ-СОДА ПЭТ РБ',
    '592521': '330 Х12 ФАНТА АПЕЛЬСИН MET/Б РФ',
    '1612609': '0.25ЛХ12 ЖБ БЕРН ЯБЛОКО КИВИ РФ',
    '202663': '0.25Х12 ЖБ БЕРН РФ',
    '321704': '330 Х12 СПРАЙТ НОВ Ф МЕТ/Б УКР',
    '1959913': '250 Х12 КОКА-КОЛА ЭНЕРДЖИ МЕТ/Б РФ',
    '1612708': '250 Х12 БЕРН ТРОПИЧЕСКИЙ МИКС ЖБ РФ',
    '1378506': '1.5 Х9 ШВЕППС МОХИТО ПЭТ РБ',
    '2086501': '1.5 Х9 ШВЕППС ГРЕЙПФРУТ ПЭТ',
    '2070401': '1.0 BRK X12 DB MOR CR/BE GR GEMINA BY',
    '1481204': '1.0 BRK X12 MOYA SEMYA MULTIFR SD BY'

}


def default_dict_creation(list_name):
    default_dict = defaultdict(list)
    for k, v in list_name:
        default_dict[k].append(v)
    return dict(default_dict)


def tuple_to_int(tup):
    result = int(''.join((str(tup[0]), f'{(tup[1]):0>5}')))
    return result


class BinNotFound(Exception):

    def __init__(self):
        self.message = 'Проблема с поиском бина в строке(такого нет в таблице)'

    def __str__(self):
        return self.message


class MapCreator:

    def __init__(self, path):
        self.warehouse_dict = {}
        self.path = path
        self.dict = {}
        self.container = []
        self._reader()

    def _reader(self):
        with open(self.path, 'r', encoding='utf8') as lx02:
            for line in lx02:
                for material in new_list:
                    upd_line = line.split('\t')
                    if material in upd_line:
                        self._look_for_items(upd_line)

    def _look_for_items(self, line):
        material = line[2]
        bin_pos = line[5]
        dat = line[6][:-1]
        quantity = line[4].split(' ')[-1:][0]  # splits and returns the last elem as member of list
        date_reversed = int(''.join((dat[-4:], dat[-7:-5], dat[-10:-8])))  # as the only member so [0]
        if quantity == '0':
            return
        self.container.append((material, (bin_pos, (quantity, date_reversed))))

    def _dictionary(self):
        self.dict = default_dict_creation(self.container)
        for material_code, value in self.dict.items():
            date_set = sorted(list({x for x in value}))
            for dat in date_set:
                cprint(date_set, 'blue')
                for index_y, y in enumerate(date_set):
                    if y == dat:
                        continue
                    if (y[0], y[1][1]) == (dat[0], dat[1][1] + 1):
                        date_set.remove(y)
                        print(date_set)
                    elif y[1][1] == dat[1][1] + 1:
                        date_set[index_y] = (y[0], (y[1][0], dat[1][1]))
                        cprint(date_set, 'red')
            for dat in date_set:
                condition_1 = (dat[0], (dat[1][0], dat[1][1] + 1))
                condition_2 = (dat[0], (dat[1][0], dat[1][1] - 1))
                for index, item in enumerate(value):
                    if item == dat or item == condition_1 or item == condition_2:
                        value[index] = dat
        for material_code, value in self.dict.items():
            self.dict[material_code] = default_dict_creation(value)

    def data_return(self):
        self._dictionary()
        for material_code, bin_name in self.dict.items():
            for bin_name_l, value in bin_name.items():
                date_set = {x[1] for x in value}
                print(date_set)
                bin_name[bin_name_l] = []
                for dat in date_set:
                    summ = sum([int(x[0]) for x in value if x[1] == dat])
                    # bin_name[bin_name_l].append((summ, dat))
                    bin_name[bin_name_l] = tuple_to_int((dat, summ))
        return self.dict


fork_map = MapCreator('lx02.txt')


for material_code, bin_name in fork_map.data_return().items():
    print(material_code, bin_name)
    print(" "*8, ['.'.join((str(x)[8:],  str(x)[6:8], str(x)[4:6], str(x)[:4])) for x in bin_name.values()])
    cprint(f'{(min(bin_name, key=bin_name.get))}', 'red')



